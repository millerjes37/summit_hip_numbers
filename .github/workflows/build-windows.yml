name: Build Windows Distribution

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  MSYS2_INSTALL_DIR: C:\msys64
  INNO_SETUP_VERSION: 6.2.2

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up MSYS2 and GStreamer dependencies
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        install: >-
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-glib2
          mingw-w64-x86_64-gstreamer
          mingw-w64-x86_64-gst-plugins-base
          mingw-w64-x86_64-gst-plugins-good
          mingw-w64-x86_64-gst-plugins-bad
          mingw-w64-x86_64-gst-plugins-ugly
        update: true
        path-type: inherit

    - name: Set up Rust (GNU toolchain)
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable-x86_64-pc-windows-gnu

    - name: Build Application
      shell: msys2 {0}
      env:
        PKG_CONFIG_PATH: /mingw64/lib/pkgconfig
        RUSTFLAGS: -L native=/mingw64/lib
      run: cargo build --release --verbose

    - name: Copy GStreamer DLLs from MSYS2
      shell: msys2 {0}
      run: |
        echo "=== Copying GStreamer DLLs from MSYS2 environment ==="
        
        # Create dist directory if it doesn't exist
        mkdir -p dist
        
        # Show what's in /mingw64/bin to debug
        echo "Contents of /mingw64/bin (first 20 DLLs):"
        ls -lh /mingw64/bin/*.dll 2>/dev/null | head -20 || echo "No DLLs found!"
        
        # Copy all DLLs from mingw64/bin
        echo "Copying DLLs from /mingw64/bin to dist/"
        dll_count=0
        for dll in /mingw64/bin/*.dll; do
          if [ -f "$dll" ]; then
            cp -v "$dll" dist/
            dll_count=$((dll_count + 1))
            if [ $dll_count -le 10 ]; then
              echo "  Copied: $(basename $dll)"
            fi
          fi
        done
        
        echo "Total DLLs copied: $dll_count"
        
        if [ $dll_count -eq 0 ]; then
          echo "ERROR: No DLLs were copied!"
          echo "Full contents of /mingw64/bin:"
          ls -lh /mingw64/bin/ | head -50
          exit 1
        fi
        
        # Copy GStreamer plugins
        echo "Copying GStreamer plugins..."
        mkdir -p dist/lib/gstreamer-1.0
        if [ -d /mingw64/lib/gstreamer-1.0 ]; then
          cp -r /mingw64/lib/gstreamer-1.0/* dist/lib/gstreamer-1.0/
          plugin_count=$(find dist/lib/gstreamer-1.0 -type f | wc -l)
          echo "Copied $plugin_count plugin files"
        else
          echo "WARNING: Plugin directory not found"
        fi
        
        # Copy share directory for schemas
        echo "Copying share directory..."
        if [ -d /mingw64/share ]; then
          cp -r /mingw64/share dist/
          echo "Share directory copied"
        else
          echo "WARNING: Share directory not found"
        fi
        
        echo "✓ GStreamer dependencies copied successfully"

    - name: Download and Install Inno Setup
      shell: pwsh
      run: |
        $inno_url = "https://files.jrsoftware.org/is/6/innosetup-${{ env.INNO_SETUP_VERSION }}.exe"
        $inno_path = "${{ runner.temp }}\innosetup.exe"
        Write-Host "Downloading Inno Setup from $inno_url"
        Invoke-WebRequest -Uri $inno_url -OutFile $inno_path
        Write-Host "Installing Inno Setup..."
        Start-Process -FilePath $inno_path -ArgumentList "/SP- /VERYSILENT /SUPPRESSMSGBOXES /NOCANCEL /NORESTART" -Wait
        $inno_dir = "C:\Program Files (x86)\Inno Setup 6"
        Write-Host "Adding '$inno_dir' to GITHUB_PATH"
        echo $inno_dir >> $env:GITHUB_PATH

    - name: Run Build Script to Create Distribution
      shell: pwsh
      run: |
        Write-Host "=== Running Build Script (DLLs already copied) ===" -ForegroundColor Cyan
        ./build_windows.ps1 -SkipBuild -SkipGStreamer
        
        Write-Host "`n=== Verifying dist directory contents ===" -ForegroundColor Cyan
        if (Test-Path "dist") {
          Write-Host "dist directory exists" -ForegroundColor Green
          $dllCount = (Get-ChildItem "dist" -Filter "*.dll" -File -ErrorAction SilentlyContinue).Count
          Write-Host "Found $dllCount DLL files in dist directory" -ForegroundColor Yellow
          
          if ($dllCount -eq 0) {
            Write-Error "NO DLLs found in dist directory!"
            Write-Host "`nContents of dist directory:" -ForegroundColor Yellow
            Get-ChildItem "dist" -Recurse | Select-Object FullName, Length | Format-Table
            exit 1
          }
          
          Write-Host "`nFirst 10 DLLs in dist:" -ForegroundColor Yellow
          Get-ChildItem "dist" -Filter "*.dll" -File | Select-Object -First 10 | ForEach-Object {
            Write-Host "  - $($_.Name) ($([math]::Round($_.Length / 1KB, 2)) KB)"
          }
          
          # Verify critical DLLs
          Write-Host "`nVerifying critical DLLs:" -ForegroundColor Yellow
          $criticalDlls = @(
            "libglib-2.0-0.dll",
            "libgobject-2.0-0.dll",
            "libgio-2.0-0.dll",
            "libgstapp-1.0-0.dll",
            "libgstreamer-1.0-0.dll"
          )
          
          $missingCritical = @()
          foreach ($dll in $criticalDlls) {
            if (Test-Path "dist\$dll") {
              Write-Host "  ✓ $dll" -ForegroundColor Green
            } else {
              Write-Host "  ✗ $dll MISSING" -ForegroundColor Red
              $missingCritical += $dll
            }
          }
          
          if ($missingCritical.Count -gt 0) {
            Write-Error "Missing critical DLLs: $($missingCritical -join ', ')"
            exit 1
          }
        } else {
          Write-Error "dist directory does not exist!"
          exit 1
        }
        
        Write-Host "`n=== Verifying portable zip contents ===" -ForegroundColor Cyan
        if (Test-Path "summit_hip_numbers_portable.zip") {
          Write-Host "Portable zip exists" -ForegroundColor Green
          $zipSize = (Get-Item "summit_hip_numbers_portable.zip").Length / 1MB
          Write-Host "Zip size: $([math]::Round($zipSize, 2)) MB" -ForegroundColor Yellow
          
          # Extract to temp location to verify contents
          $tempTest = "temp_zip_test"
          if (Test-Path $tempTest) { Remove-Item $tempTest -Recurse -Force }
          Expand-Archive -Path "summit_hip_numbers_portable.zip" -DestinationPath $tempTest
          
          $zipDllCount = (Get-ChildItem $tempTest -Filter "*.dll" -File -ErrorAction SilentlyContinue).Count
          Write-Host "Found $zipDllCount DLL files in zip" -ForegroundColor Yellow
          
          if ($zipDllCount -eq 0) {
            Write-Error "NO DLLs found in portable zip! Zip creation failed."
            Write-Host "`nContents of zip:" -ForegroundColor Yellow
            Get-ChildItem $tempTest -Recurse | Select-Object FullName, Length | Format-Table
            exit 1
          }
          
          # Verify critical DLLs in zip
          Write-Host "`nVerifying critical DLLs in zip:" -ForegroundColor Yellow
          foreach ($dll in $criticalDlls) {
            if (Test-Path "$tempTest\$dll") {
              Write-Host "  ✓ $dll" -ForegroundColor Green
            } else {
              Write-Host "  ✗ $dll MISSING FROM ZIP" -ForegroundColor Red
            }
          }
          
          Remove-Item $tempTest -Recurse -Force
        } else {
          Write-Error "Portable zip does not exist!"
          exit 1
        }
        
        Write-Host "`n✓ Build verification passed!" -ForegroundColor Green

    - name: Test Portable Executable
      shell: pwsh
      run: |
        Write-Host "=== Testing Portable Executable ===" -ForegroundColor Cyan
        
        # Unzip the portable bundle
        if (Test-Path "summit_hip_numbers_portable.zip") {
          Expand-Archive -Path "summit_hip_numbers_portable.zip" -DestinationPath "test_portable" -Force
          Write-Host "Extracted portable bundle" -ForegroundColor Green
        } else {
          Write-Error "Portable zip not found!"
          exit 1
        }
        
        # Show contents
        Write-Host "`nPortable bundle contents:" -ForegroundColor Yellow
        Get-ChildItem -Path "test_portable" -Recurse | Select-Object FullName, Length | Format-Table
        
        # Check for executable
        $exePath = "test_portable\summit_hip_numbers.exe"
        if (-not (Test-Path $exePath)) {
          Write-Error "Executable not found at $exePath"
          exit 1
        }
        Write-Host "`nExecutable found: $exePath" -ForegroundColor Green
        
        # Check for critical DLLs
        Write-Host "`nChecking for critical DLLs:" -ForegroundColor Yellow
        $criticalDlls = @(
          "libglib-2.0-0.dll",
          "libgobject-2.0-0.dll", 
          "libgio-2.0-0.dll",
          "libgstapp-1.0-0.dll",
          "libgstreamer-1.0-0.dll"
        )
        
        $missingDlls = @()
        foreach ($dll in $criticalDlls) {
          $dllPath = "test_portable\$dll"
          if (Test-Path $dllPath) {
            Write-Host "  ✓ $dll" -ForegroundColor Green
          } else {
            Write-Host "  ✗ $dll MISSING" -ForegroundColor Red
            $missingDlls += $dll
          }
        }
        
        if ($missingDlls.Count -gt 0) {
          Write-Error "Missing critical DLLs: $($missingDlls -join ', ')"
          Write-Host "`nSearching for DLLs in test_portable:" -ForegroundColor Yellow
          Get-ChildItem -Path "test_portable" -Filter "*.dll" | ForEach-Object {
            Write-Host "  Found: $($_.Name)"
          }
          exit 1
        }
        
        # Try to run the executable briefly
        Write-Host "`nAttempting to run executable for 10 seconds..." -ForegroundColor Yellow
        $logFile = "test_portable\test-run.log"
        
        try {
          $process = Start-Process -FilePath $exePath -PassThru -NoNewWindow -RedirectStandardOutput $logFile -RedirectStandardError $logFile -WorkingDirectory "test_portable"
          Write-Host "Process started with PID: $($process.Id)" -ForegroundColor Green
          
          Start-Sleep -Seconds 10
          
          if (Get-Process -Id $process.Id -ErrorAction SilentlyContinue) {
            Write-Host "✓ Process is running successfully!" -ForegroundColor Green
            Stop-Process -Id $process.Id -Force
            Write-Host "Process stopped" -ForegroundColor Green
          } else {
            Write-Warning "Process exited early - check logs"
          }
        } catch {
          Write-Error "Failed to start process: $_"
          exit 1
        }
        
        # Show log output
        if (Test-Path $logFile) {
          Write-Host "`n=== Execution Log ===" -ForegroundColor Cyan
          Get-Content $logFile
          Write-Host "===================" -ForegroundColor Cyan
        }
        
        Write-Host "`n✓ Portable executable test completed successfully!" -ForegroundColor Green

    - name: Upload Portable Application as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: summit-hip-numbers-windows-portable
        path: summit_hip_numbers_portable.zip
        
    - name: Upload Installer as Artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: summit-hip-numbers-windows-installer
        path: dist/summit_hip_numbers_installer.exe

    - name: Upload Test Log
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: portable-test-log
        path: test_portable/test-run.log
        if-no-files-found: ignore