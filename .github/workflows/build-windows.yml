name: Build Windows Distribution

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  MSYS2_INSTALL_DIR: C:\msys64

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        variant: [full, demo]

    steps:
    - uses: actions/checkout@v4

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Set up MSYS2 and GStreamer dependencies
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        install: >-
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-glib2
          mingw-w64-x86_64-gstreamer
          mingw-w64-x86_64-gst-plugins-base
          mingw-w64-x86_64-gst-plugins-good
          mingw-w64-x86_64-gst-plugins-bad
          mingw-w64-x86_64-gst-plugins-ugly
          zip
          unzip
        update: true
        path-type: inherit

    - name: Set up Rust (GNU toolchain)
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable-x86_64-pc-windows-gnu

    - name: Create Distribution
      shell: msys2 {0}
      run: |
        chmod +x scripts/build_windows_msys2.sh
        ./scripts/build_windows_msys2.sh ${{ matrix.variant }}

    - name: Build Installer
      if: matrix.variant == 'full'
      uses: Minionguyjpro/Inno-Setup-Action@v1
      with:
        path: scripts/installer.iss
        options: /Q

    - name: Upload Portable Application as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: summit-hip-numbers-windows-${{ matrix.variant }}-portable
        path: summit_hip_numbers_${{ matrix.variant }}_portable.zip
        
    - name: Upload Installer as Artifact
      uses: actions/upload-artifact@v4
      if: always() && matrix.variant == 'full'
      with:
        name: summit-hip-numbers-windows-installer
        path: dist/summit_hip_numbers_installer.exe

  security-audit:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Rust (GNU toolchain)
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable-x86_64-pc-windows-gnu
    - name: Install cargo-audit
      run: cargo install cargo-audit
    - name: Run security audit
      run: cargo audit

  test-portable:
    runs-on: windows-latest
    needs: build-windows
    strategy:
      matrix:
        variant: [full, demo]

    steps:
    - name: Download Portable Bundle
      uses: actions/download-artifact@v4
      with:
        name: summit-hip-numbers-windows-${{ matrix.variant }}-portable

    - name: Test Portable Executable
      shell: pwsh
      run: |
        Write-Host "=== Testing Portable Executable (${{ matrix.variant }}) in Clean Environment ===" -ForegroundColor Cyan

        # Unzip the portable bundle
        $zipName = "summit_hip_numbers_${{ matrix.variant }}_portable.zip"
        if (Test-Path $zipName) {
          Expand-Archive -Path $zipName -DestinationPath "test_portable" -Force
          Write-Host "Extracted portable bundle" -ForegroundColor Green
        } else {
          Write-Error "Portable zip not found: $zipName"
          exit 1
        }
        
        # Show contents
        Write-Host "`nPortable bundle contents:" -ForegroundColor Yellow
        Get-ChildItem -Path "test_portable" -Recurse | Select-Object FullName, Length | Format-Table
        
        # Check for executable
        $exeName = if ("${{ matrix.variant }}" -eq "demo") { "summit_hip_numbers_demo.exe" } else { "summit_hip_numbers.exe" }
        $exePath = "test_portable\$exeName"
        if (-not (Test-Path $exePath)) {
          Write-Error "Executable not found at $exePath"
          exit 1
        }
        Write-Host "`nExecutable found: $exePath" -ForegroundColor Green
        
        # Check for critical DLLs
        Write-Host "`nChecking for critical DLLs:" -ForegroundColor Yellow
        $criticalDlls = @(
          "libglib-2.0-0.dll",
          "libgobject-2.0-0.dll", 
          "libgio-2.0-0.dll",
          "libgstapp-1.0-0.dll",
          "libgstreamer-1.0-0.dll"
        )
        
        $missingDlls = @()
        foreach ($dll in $criticalDlls) {
          $dllPath = "test_portable\$dll"
          if (Test-Path $dllPath) {
            Write-Host "  ✓ $dll" -ForegroundColor Green
          } else {
            Write-Host "  ✗ $dll MISSING" -ForegroundColor Red
            $missingDlls += $dll
          }
        }
        
        if ($missingDlls.Count -gt 0) {
          Write-Error "Missing critical DLLs: $($missingDlls -join ', ')"
          Write-Host "`nSearching for DLLs in test_portable:" -ForegroundColor Yellow
          Get-ChildItem -Path "test_portable" -Filter "*.dll" | ForEach-Object {
            Write-Host "  Found: $($_.Name)"
          }
          exit 1
        }
        
        # Try to run the executable briefly
        Write-Host "`nAttempting to run executable for 10 seconds..." -ForegroundColor Yellow
        $logFile = "test_portable\test-run.log"
        
        try {
           $process = Start-Process -FilePath $exePath -PassThru -NoNewWindow -RedirectStandardOutput $logFile -RedirectStandardError $logFile -WorkingDirectory "test_portable"
           Write-Host "Process started with PID: $($process.Id)" -ForegroundColor Green

           Start-Sleep -Seconds 2

           # Simulate arrow key navigation
           Write-Host "Simulating arrow key presses..." -ForegroundColor Yellow
           Add-Type -AssemblyName System.Windows.Forms
           [System.Windows.Forms.SendKeys]::SendWait("{DOWN}")  # Navigate backward
           Start-Sleep -Seconds 1
           [System.Windows.Forms.SendKeys]::SendWait("{UP}")   # Navigate forward
           Start-Sleep -Seconds 1

           Start-Sleep -Seconds 6
          
          if (Get-Process -Id $process.Id -ErrorAction SilentlyContinue) {
            Write-Host "✓ Process is running successfully!" -ForegroundColor Green
            Stop-Process -Id $process.Id -Force
            Write-Host "Process stopped" -ForegroundColor Green
          } else {
            Write-Warning "Process exited early - check logs"
          }
        } catch {
          Write-Error "Failed to start process: $_"
          exit 1
        }
        
        # Show log output
        if (Test-Path $logFile) {
           Write-Host "`n=== Execution Log ===" -ForegroundColor Cyan
           Get-Content $logFile
           Write-Host "===================" -ForegroundColor Cyan

           # Check for navigation logs
           $navLogs = Get-Content $logFile | Select-String "Navigated"
           if ($navLogs) {
               Write-Host "`n✓ Arrow key navigation detected in logs:" -ForegroundColor Green
               $navLogs | ForEach-Object { Write-Host "  $_" }
           } else {
               Write-Warning "No arrow key navigation logs found - check if feature is enabled or keys were sent properly"
           }
        }
        
        Write-Host "`n✓ Portable executable test completed successfully!" -ForegroundColor Green

    - name: Upload Test Log
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: portable-test-log-${{ matrix.variant }}
        path: test_portable/test-run.log
        if-no-files-found: ignore