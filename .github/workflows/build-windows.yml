name: Build Windows Distribution

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  MSYS2_INSTALL_DIR: C:\msys64
  INNO_SETUP_VERSION: 6.2.2
  PKG_CONFIG_SYSROOT_DIR: /usr/x86_64-w64-mingw32
  PKG_CONFIG_PATH: /usr/x86_64-w64-mingw32/lib/pkgconfig
  PKG_CONFIG_ALLOW_CROSS: 1
  FFMPEG_DIR: /usr
  TARGET: x86_64-pc-windows-gnu

jobs:
  build-windows:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [full, demo]
    steps:
    - uses: actions/checkout@v4

     - name: Install cross-compilation dependencies
       run: |
         sudo apt-get update
         sudo apt-get install -y gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64
         sudo apt-get install -y pkg-config mingw-w64-x86-64-dev
         sudo apt-get install -y libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libswresample-dev libavdevice-dev

    - name: Set up Rust cross-compilation
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-gnu

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

     - name: Build application
       run: |
         cargo build --release --target x86_64-pc-windows-gnu --package summit_hip_numbers ${{ matrix.variant == 'demo' && '--features demo' || '' }}

    - name: Create distribution
      run: |
        mkdir -p dist/${{ matrix.variant }}
        cp target/x86_64-pc-windows-gnu/release/summit_hip_numbers${{ matrix.variant == 'demo' && '_demo' || '' }}.exe dist/${{ matrix.variant }}/
        # Copy required DLLs
        cp /usr/x86_64-w64-mingw32/lib/*.dll dist/${{ matrix.variant }}/ 2>/dev/null || true
        cp target/x86_64-pc-windows-gnu/release/deps/*.dll dist/${{ matrix.variant }}/ 2>/dev/null || true

    - name: Create portable ZIP
      run: |
        cd dist/${{ matrix.variant }}
        zip -r ../../summit_hip_numbers_${{ matrix.variant }}_portable.zip .

    - name: Upload portable application
      uses: actions/upload-artifact@v4
      with:
        name: summit-hip-numbers-windows-${{ matrix.variant }}-portable
        path: summit_hip_numbers_${{ matrix.variant }}_portable.zip

  test-portable:
    runs-on: windows-latest
    needs: build-windows
    strategy:
      matrix:
        variant: [full, demo]

    steps:
    - name: Download Portable Bundle
      uses: actions/download-artifact@v4
      with:
        name: summit-hip-numbers-windows-${{ matrix.variant }}-portable

    - name: Test Portable Executable
      shell: pwsh
      run: |
        Write-Host "=== Testing Portable Executable (${{ matrix.variant }}) in Clean Environment ===" -ForegroundColor Cyan

        # Unzip the portable bundle
        $zipName = "summit_hip_numbers_${{ matrix.variant }}_portable.zip"
        if (Test-Path $zipName) {
          Expand-Archive -Path $zipName -DestinationPath "test_portable" -Force
          Write-Host "Extracted portable bundle" -ForegroundColor Green
        } else {
          Write-Error "Portable zip not found: $zipName"
          exit 1
        }
        
        # Show contents
        Write-Host "`nPortable bundle contents:" -ForegroundColor Yellow
        Get-ChildItem -Path "test_portable" -Recurse | Select-Object FullName, Length | Format-Table
        
        # Check for executable
        $exeName = if ("${{ matrix.variant }}" -eq "demo") { "summit_hip_numbers_demo.exe" } else { "summit_hip_numbers.exe" }
        $exePath = "test_portable\$exeName"
        if (-not (Test-Path $exePath)) {
          Write-Error "Executable not found at $exePath"
          exit 1
        }
        Write-Host "`nExecutable found: $exePath" -ForegroundColor Green
        
        # Check for critical DLLs (FFmpeg)
        Write-Host "`nChecking for critical FFmpeg DLLs:" -ForegroundColor Yellow
        $criticalDlls = @(
          "avutil-*.dll",
          "avcodec-*.dll",
          "avformat-*.dll",
          "swscale-*.dll",
          "swresample-*.dll"
        )
        
        $missingDlls = @()
        foreach ($dllPattern in $criticalDlls) {
          $foundDlls = Get-ChildItem -Path "test_portable" -Filter $dllPattern -ErrorAction SilentlyContinue
          if ($foundDlls) {
            foreach ($dll in $foundDlls) {
              Write-Host "  ✓ $($dll.Name)" -ForegroundColor Green
            }
          } else {
            Write-Host "  ✗ $dllPattern MISSING" -ForegroundColor Red
            $missingDlls += $dllPattern
          }
        }
        
        if ($missingDlls.Count -gt 0) {
          Write-Error "Missing critical DLLs: $($missingDlls -join ', ')"
          Write-Host "`nSearching for DLLs in test_portable:" -ForegroundColor Yellow
          Get-ChildItem -Path "test_portable" -Filter "*.dll" | ForEach-Object {
            Write-Host "  Found: $($_.Name)"
          }
          exit 1
        }
        
        # Try to run the executable briefly
        Write-Host "`nAttempting to run executable for 10 seconds..." -ForegroundColor Yellow
        $logFile = "test_portable\test-run.log"
        
        try {
           $process = Start-Process -FilePath $exePath -PassThru -NoNewWindow -RedirectStandardOutput $logFile -RedirectStandardError $logFile -WorkingDirectory "test_portable"
           Write-Host "Process started with PID: $($process.Id)" -ForegroundColor Green

           Start-Sleep -Seconds 2

           # Simulate arrow key navigation
           Write-Host "Simulating arrow key presses..." -ForegroundColor Yellow
           Add-Type -AssemblyName System.Windows.Forms
           [System.Windows.Forms.SendKeys]::SendWait("{DOWN}")  # Navigate backward
           Start-Sleep -Seconds 1
           [System.Windows.Forms.SendKeys]::SendWait("{UP}")   # Navigate forward
           Start-Sleep -Seconds 1

           Start-Sleep -Seconds 6
          
          if (Get-Process -Id $process.Id -ErrorAction SilentlyContinue) {
            Write-Host "✓ Process is running successfully!" -ForegroundColor Green
            Stop-Process -Id $process.Id -Force
            Write-Host "Process stopped" -ForegroundColor Green
          } else {
            Write-Warning "Process exited early - check logs"
          }
        } catch {
          Write-Error "Failed to start process: $_"
          exit 1
        }
        
        # Show log output
        if (Test-Path $logFile) {
           Write-Host "`n=== Execution Log ===" -ForegroundColor Cyan
           Get-Content $logFile
           Write-Host "===================" -ForegroundColor Cyan

           # Check for navigation logs
           $navLogs = Get-Content $logFile | Select-String "Navigated"
           if ($navLogs) {
               Write-Host "`n✓ Arrow key navigation detected in logs:" -ForegroundColor Green
               $navLogs | ForEach-Object { Write-Host "  $_" }
           } else {
               Write-Warning "No arrow key navigation logs found - check if feature is enabled or keys were sent properly"
           }
        }
        
        Write-Host "`n✓ Portable executable test completed successfully!" -ForegroundColor Green

    - name: Upload Test Log
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: portable-test-log-${{ matrix.variant }}
        path: test_portable/test-run.log
        if-no-files-found: ignore