name: Unified Build (xtask)

on:
  push:
    branches: [main]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # ============================================================================
  # VALIDATION - Code Quality & Security
  # ============================================================================

  validate:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2

      # Install system dependencies needed for compilation (Clippy needs to compile)
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev \
            libssl-dev \
            libavutil-dev libavcodec-dev libavformat-dev \
            libswscale-dev libswresample-dev libavfilter-dev \
            libavdevice-dev \
            pkg-config clang

      - name: Format Check
        run: cargo fmt --all -- --check

      - name: Clippy
        run: cargo clippy --package xtask -- -D warnings

      - name: Security Audit
        run: |
          cargo install cargo-audit
          cargo audit

  # ============================================================================
  # BUILD ALL PLATFORMS - Using xtask
  # ============================================================================

  build-all:
    name: Build All Platforms
    runs-on: ${{ matrix.os }}
    needs: validate
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds - native on Ubuntu
           - os: ubuntu-latest
             platform: linux
             variant: full

           - os: ubuntu-latest
             platform: linux
             variant: demo

           # macOS builds - must run on macOS
           - os: macos-latest
             platform: macos
             variant: full

           - os: macos-latest
             platform: macos
             variant: demo

           # Windows builds - native on Windows
           - os: windows-latest
             platform: windows
             variant: full

           - os: windows-latest
             platform: windows
             variant: demo

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.platform }}-${{ matrix.variant }}

      # Linux-specific: Install system dependencies
      - name: Install Linux Dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev \
            libavutil-dev libavcodec-dev libavformat-dev \
            libswscale-dev libswresample-dev libavfilter-dev \
            libavdevice-dev \
            pkg-config clang

      # macOS-specific: Install FFmpeg via Homebrew
      - name: Install macOS Dependencies
        if: matrix.platform == 'macos'
        run: |
          # Install FFmpeg 6 to avoid bindgen time_t header issues with FFmpeg 7.x
          # FFmpeg 6 is compatible with ffmpeg-sys-next 7.1.3
          brew install ffmpeg@6 pkg-config

          # Link ffmpeg@6 to make it the default
          brew link --overwrite ffmpeg@6

          # CRITICAL: Use target-specific Cargo build environment variables
          # These get passed through to build scripts (including ffmpeg-sys-next)
          SDKROOT=$(xcrun --show-sdk-path)
          echo "SDKROOT=$SDKROOT" >> $GITHUB_ENV

          # Set target-specific CFLAGS that include SDK path
          CFLAGS="-isysroot $SDKROOT -I$SDKROOT/usr/include -I/opt/homebrew/include"
          echo "CFLAGS_aarch64_apple_darwin=$CFLAGS" >> $GITHUB_ENV
          echo "CFLAGS_x86_64_apple_darwin=$CFLAGS" >> $GITHUB_ENV
          echo "CXXFLAGS_aarch64_apple_darwin=$CFLAGS -stdlib=libc++" >> $GITHUB_ENV
          echo "CXXFLAGS_x86_64_apple_darwin=$CFLAGS -stdlib=libc++" >> $GITHUB_ENV

          # Also set standard environment variables as backup
          echo "C_INCLUDE_PATH=$SDKROOT/usr/include:/opt/homebrew/include" >> $GITHUB_ENV
          echo "CPLUS_INCLUDE_PATH=$SDKROOT/usr/include:/opt/homebrew/include" >> $GITHUB_ENV
          echo "CPATH=$SDKROOT/usr/include:/opt/homebrew/include" >> $GITHUB_ENV
          echo "CFLAGS=$CFLAGS" >> $GITHUB_ENV
          echo "CXXFLAGS=$CFLAGS -stdlib=libc++" >> $GITHUB_ENV
          echo "LDFLAGS=-L/opt/homebrew/lib -stdlib=libc++" >> $GITHUB_ENV
          echo "LIBRARY_PATH=/opt/homebrew/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/opt/homebrew/lib/pkgconfig" >> $GITHUB_ENV
          echo "FFMPEG_DIR=/opt/homebrew" >> $GITHUB_ENV
          echo "FFMPEG_INCLUDE_DIR=/opt/homebrew/include" >> $GITHUB_ENV
          echo "FFMPEG_LIBRARY_DIR=/opt/homebrew/lib" >> $GITHUB_ENV

      # Windows-specific: Setup environment for FFmpeg
      - name: Setup Windows Build Environment
        if: matrix.platform == 'windows'
        shell: bash
        run: |
          # xtask will download FFmpeg automatically, but we set up the environment
          echo "Setting up Windows build environment..."

      # Install Docker for cross-compilation (Linux from Ubuntu)
      - name: Set up Docker
        if: matrix.platform == 'linux'
        uses: docker/setup-docker-action@v4
        with:
          daemon-config: |
            {
              "features": {
                "containerd-snapshotter": true
              }
            }

      # Install cross for Linux builds
      - name: Install Cross
        if: matrix.platform == 'linux'
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      # Build xtask first
      - name: Build xtask
        run: |
          if [ "${{ matrix.platform }}" = "macos" ]; then
            # Use wrapper script for macOS to set BINDGEN_EXTRA_CLANG_ARGS
            ./.github/scripts/macos-build-wrapper.sh build --package xtask --release
          else
            cargo build --package xtask --release
          fi
        shell: bash

      # Ensure FFmpeg is downloaded (xtask will auto-download if needed)
      - name: Prepare FFmpeg Dependencies
        if: matrix.platform == 'windows'
        run: |
          echo "FFmpeg will be automatically downloaded by xtask if needed..."
          # The dist command will call ensure_ffmpeg_libs which downloads FFmpeg
        shell: bash

      # Build using xtask
      - name: Build with xtask
        run: |
          if [ "${{ matrix.platform }}" = "macos" ]; then
            # Use wrapper script for macOS to set BINDGEN_EXTRA_CLANG_ARGS
            ./.github/scripts/macos-build-wrapper.sh run --package xtask --release -- dist --platform ${{ matrix.platform }} --variant ${{ matrix.variant }}
          else
            ./target/release/xtask dist --platform ${{ matrix.platform }} --variant ${{ matrix.variant }}
          fi
        shell: bash

      # Upload artifacts
      - name: Upload Distribution
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.variant }}-dist
          path: |
            dist/*.zip
            dist/*.tar.gz
            dist/*.dmg
          retention-days: 30

  # ============================================================================
  # TEST DISTRIBUTIONS
  # ============================================================================

  test-dist:
    name: Test ${{ matrix.platform }} Distribution
    runs-on: ${{ matrix.os }}
    needs: build-all
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux
            os: ubuntu-latest
            variant: full

          - platform: macos
            os: macos-latest
            variant: full

          - platform: windows
            os: ubuntu-latest
            variant: full

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.variant }}-dist

      - name: Test Linux Distribution
        if: matrix.platform == 'linux'
        run: |
          echo "Testing Linux distribution..."
          tar -tzf *.tar.gz | head -20
          tar -xzf *.tar.gz

          # Find and test binary
          BINARY=$(find . -name "summit_hip_numbers" -type f -executable | head -n 1)
          if [ -z "$BINARY" ]; then
            echo "ERROR: Binary not found"
            exit 1
          fi

          echo "✓ Found binary: $BINARY"
          file "$BINARY"
          DIST_DIR=$(dirname "$BINARY")

          # Check if launcher script exists
          if [ -f "$DIST_DIR/run.sh" ]; then
            echo "✓ Found launcher script: run.sh"
          fi

          # Verify FFmpeg .so files if bundled
          echo ""
          echo "Checking for bundled FFmpeg libraries..."

          FFMPEG_LIBS=("libavutil.so" "libavcodec.so" "libavformat.so" "libswscale.so" "libswresample.so")
          BUNDLED_COUNT=0

          for lib in "${FFMPEG_LIBS[@]}"; do
            if ls "$DIST_DIR"/${lib}* 1> /dev/null 2>&1; then
              LIB_FILE=$(ls "$DIST_DIR"/${lib}* | head -n 1)
              LIB_SIZE=$(stat -c%s "$LIB_FILE")
              echo "✓ Bundled: $(basename "$LIB_FILE") (${LIB_SIZE} bytes)"
              BUNDLED_COUNT=$((BUNDLED_COUNT + 1))
            fi
          done

          if [ $BUNDLED_COUNT -gt 0 ]; then
            echo ""
            echo "✓ Found $BUNDLED_COUNT bundled FFmpeg libraries"
          else
            echo ""
            echo "ℹ No bundled libraries (will use system FFmpeg)"
          fi

          # Check dynamic dependencies
          echo ""
          echo "Checking dynamic dependencies..."
          ldd "$BINARY" || echo "Note: ldd failed"

      - name: Test macOS Distribution
        if: matrix.platform == 'macos'
        run: |
          echo "Testing macOS distribution..."
          unzip -l *.zip | head -20
          unzip *.zip

          # Find binary (check for app bundle first, then standalone binary)
          BINARY=$(find . -name "summit_hip_numbers*" -type f -perm +111 | grep -v "\.app" | head -n 1)
          if [ -z "$BINARY" ]; then
            echo "ERROR: Binary not found"
            exit 1
          fi

          echo "✓ Found binary: $BINARY"
          file "$BINARY"
          DIST_DIR=$(dirname "$BINARY")

          # Verify FFmpeg dylibs are present
          echo ""
          echo "Verifying FFmpeg dylibs..."

          REQUIRED_DYLIBS=("libavutil" "libavcodec" "libavformat" "libswscale" "libswresample")
          MISSING_DYLIBS=()

          for dylib in "${REQUIRED_DYLIBS[@]}"; do
            if ! ls "$DIST_DIR"/${dylib}.*.dylib 1> /dev/null 2>&1; then
              MISSING_DYLIBS+=("$dylib")
              echo "✗ Missing: ${dylib}.*.dylib"
            else
              DYLIB_FILE=$(ls "$DIST_DIR"/${dylib}.*.dylib | head -n 1)
              DYLIB_SIZE=$(stat -f%z "$DYLIB_FILE")
              echo "✓ Found: $(basename "$DYLIB_FILE") (${DYLIB_SIZE} bytes)"
            fi
          done

          if [ ${#MISSING_DYLIBS[@]} -ne 0 ]; then
            echo ""
            echo "ERROR: Missing required dylibs: ${MISSING_DYLIBS[*]}"
            exit 1
          fi

          echo ""
          echo "✓ All required FFmpeg dylibs present"

      - name: Test Windows Distribution
        if: matrix.platform == 'windows'
        run: |
          echo "Testing Windows distribution..."
          unzip -l *.zip | head -20
          unzip *.zip

          # Find executable
          EXE=$(find . -name "*.exe" -type f | head -n 1)
          if [ -z "$EXE" ]; then
            echo "ERROR: Executable not found"
            exit 1
          fi

          echo "✓ Found executable: $EXE"
          file "$EXE"

          # Verify FFmpeg DLLs are present
          echo ""
          echo "Verifying FFmpeg DLLs..."
          DIST_DIR=$(dirname "$EXE")

          REQUIRED_DLLS=("avutil" "avcodec" "avformat" "swscale" "swresample")
          MISSING_DLLS=()

          for dll in "${REQUIRED_DLLS[@]}"; do
            if ! ls "$DIST_DIR"/${dll}-*.dll 1> /dev/null 2>&1; then
              MISSING_DLLS+=("$dll")
              echo "✗ Missing: ${dll}-*.dll"
            else
              DLL_FILE=$(ls "$DIST_DIR"/${dll}-*.dll | head -n 1)
              DLL_SIZE=$(stat -f%z "$DLL_FILE" 2>/dev/null || stat -c%s "$DLL_FILE" 2>/dev/null)
              echo "✓ Found: $(basename "$DLL_FILE") (${DLL_SIZE} bytes)"
            fi
          done

          if [ ${#MISSING_DLLS[@]} -ne 0 ]; then
            echo ""
            echo "ERROR: Missing required DLLs: ${MISSING_DLLS[*]}"
            exit 1
          fi

          echo ""
          echo "✓ All required FFmpeg DLLs present"

  # ============================================================================
  # BUILD SUMMARY
  # ============================================================================

  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-all, test-dist]
    if: always()
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate Summary
        run: |
          echo "# Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
          find artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" -o -name "*.dmg" \) -exec sh -c '
            for file; do
              size=$(du -h "$file" | cut -f1)
              echo "- $(basename "$file") ($size)" >> $GITHUB_STEP_SUMMARY
            done
          ' sh {} +

  # ============================================================================
  # RELEASE
  # ============================================================================

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-all, test-dist]
    if: github.event_name == 'release'
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare Release Files
        run: |
          mkdir -p release
          find artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" -o -name "*.dmg" \) -exec cp {} release/ \;
          ls -lh release/

      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
          files: release/*
          generate_release_notes: true
          fail_on_unmatched_files: true